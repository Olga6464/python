# 1. Реализовать класс Matrix (матрица). Обеспечить
# перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков)
# для формирования матрицы.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для
# реализации операции сложения двух объектов класса
# Matrix (двух матриц). Результатом сложения должна
# быть новая матрица.

class Matrix:
    def __init__(self, list_1, list_2):
      self.list_1 = list_1
      self.list_2 = list_2

    def __abs__(self):
        matr = [[0, 0, 0],
                [0, 0, 0],
                [0, 0, 0]]

        for i in range(len(self.list_1)):

            for a in range(len(self.list_2[i])):
                matr[i][a] = self.list_1[i][a] + self.list_2[i][a]

        return str('\n'.join(['\t'.join([str(a) for a in i]) for i in matr]))

    def __str__(self):
        return str('\n'.join(['\t'.join([str(a) for a in i]) for i in matr]))

my_matrix = Matrix([[4, 8, 1],
                    [2, 5, 7],
                    [9, 3, 4]],
                   [[10, 20, 30],
                    [40, 50, 60],
                    [70, 80, 90]])

print(my_matrix.__abs__())

# 2. Реализовать проект расчета суммарного расхода ткани на
# производство одежды. Основная сущность (класс) этого
# проекта — одежда, которая может иметь определенное название.
# К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто)
# и рост (для костюма). Это могут быть обычные числа: V и H,
# соответственно.
# Для определения расхода ткани по каждому типу одежды
# использовать формулы: для пальто (V/6.5 + 0.5), для костюма
# (2 * H + 0.3). Проверить работу этих методов на реальных
# данных.
# Реализовать общий подсчет расхода ткани. Проверить на
# практике полученные на этом уроке знания: реализовать
# абстрактные классы для основных классов проекта, проверить
# на практике работу декоратора @property.

class Texstil:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def get_square_c(self):
        return self.width / 6.5 + 0.5
    def get_square_j(self):
        return self.height * 2 + 0.3

    @property
    def get_sq_full(self):
        return  str(f'Площадь общая ткани \n'
                    f' {(self.width / 6.5 + 0.5) + (self.height * 2 + 0.3)}')

class Coat(Texstil):
    def __init__(self, width, height):
        super().__init__(width, height)
        self.square_c = round(self.width / 6.5 + 0.5)

    def __str__(self):
        #return f'Площадь на пальто {self.get_square_c}'
        return f'Площадь на пальто {self.square_c}'


class Jacket(Texstil):
    def __init__(self, width, height):
        super().__init__(width, height)
        self.square_j = round(self.height * 2 + 0.3)

    def __str__(self):
        return  f'Площадь на костюм {self.square_j}'

coat = Coat(2, 4)
jacket = Jacket(1, 2)
print(coat)
print(jacket)
print(coat.get_sq_full)
print(jacket.get_sq_full)
print(jacket.get_square_c())
print(jacket.get_square_j())

# 3. Реализовать программу работы с органическими клетками.
# Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству
# клеток (целое число). В классе должны быть реализованы
# методы перегрузки арифметических операторов: сложение
# (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться
# только к клеткам и выполнять увеличение, уменьшение, умножение
# и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до
# целого числа.
# В классе необходимо реализовать метод make_order(), принимающий
# экземпляр класса и количество ячеек в ряду. Данный метод
# позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество
# ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек
# в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.

class Cell:
    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __str__(self):
        return f'Результат операции {self.quantity * "*"}'
    def __add__(self, other):
        return Cell(self.quantity + other.quantity)

    #def __sub__(self, other):
        #return self.quantity - other.quantity if (self.quantity - other.quantity) > 0
       # else print('Отрицательный')





















